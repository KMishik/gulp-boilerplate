/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.
.sprites-images();
.sprites(@spritesheet-sprites);
*/
html,
body {
  margin: 0;
  padding: 0;
  border: 0;
}
body {
  font-family: Arial, sans-serif;
  line-height: 1.5;
  font-size: 14px;
  background: #fff;
  color: #000;
  word-wrap: break-word;
  -webkit-text-size-adjust: none;
}
* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: normal;
}
p img {
  float: left;
  margin: 0 10px 5px 0;
  padding: 0;
}
img {
  border: 0;
  max-width: 100%;
}
table {
  width: auto;
  border-collapse: collapse;
  border-spacing: 0;
}
.dialog-box {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.3);
  z-index: 1000;
  text-align: center;
  opacity: 0;
  -webkit-transition: opacity .3s linear;
  transition: opacity .3s linear;
  display: none;
}
.dialog-box.active {
  opacity: 1;
}
.dialog-box .dialog {
  -webkit-transition: -webkit-transform .3s linear;
  transition: -webkit-transform .3s linear;
  transition: transform .3s linear;
  transition: transform .3s linear, -webkit-transform .3s linear;
  -webkit-transform: scale(0.5, 0.5);
      -ms-transform: scale(0.5, 0.5);
          transform: scale(0.5, 0.5);
  display: inline-block;
  vertical-align: middle;
  background: #fff;
  padding: 20px;
  -webkit-box-shadow: 3px 3px 6px 1px rgba(0, 0, 0, 0.1);
          box-shadow: 3px 3px 6px 1px rgba(0, 0, 0, 0.1);
  position: relative;
}
.dialog-box .dialog .closer {
  font-family: Arial;
  display: inline-block;
  width: 30px;
  height: 30px;
  line-height: 30px;
  text-align: center;
  vertical-align: middle;
  font-size: 30px;
  border: 1px solid #ccc;
  -webkit-border-radius: 50%;
          border-radius: 50%;
  position: absolute;
  right: -15px;
  top: -15px;
  color: #000;
  text-decoration: none;
  background-color: #fff;
  opacity: .8;
  -webkit-transition: opacity .3s linear, -webkit-transform .3s linear;
  transition: opacity .3s linear, -webkit-transform .3s linear;
  transition: opacity .3s linear, transform .3s linear;
  transition: opacity .3s linear, transform .3s linear, -webkit-transform .3s linear;
}
.dialog-box .dialog .closer:hover {
  -webkit-transform: scale(1.1, 1.1);
      -ms-transform: scale(1.1, 1.1);
          transform: scale(1.1, 1.1);
  opacity: 1;
}
.dialog-box .dialog .closer:active {
  -webkit-transform: rotate(30deg);
      -ms-transform: rotate(30deg);
          transform: rotate(30deg);
}
.dialog-box.active {
  opacity: 1;
}
.dialog-box.active .dialog {
  -webkit-transform: scale(1, 1);
      -ms-transform: scale(1, 1);
          transform: scale(1, 1);
}
.dialog-box:before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle;
}
.castle,.logo {
  background-image: url('../images/sprite.png');
}
.castle {
  background-position: 0px -30px;
  width: 24px;
  height: 24px;
}
.logo {
  background-position: 0px 0px;
  width: 60px;
  height: 30px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
